#pragma config(Sensor, S1,     gyro,           sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S2,     rightSonar,     sensorEV3_Ultrasonic)
#pragma config(Sensor, S3,     lightSensor,    sensorI2CCustom)
#pragma config(Sensor, S4,     leftSonar,      sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          rightMotor,    tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          leftMotor,     tmotorEV3_Large, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
#include "HitechnicColorSensor.h"

bool foundLine = false;
long r,g,b,avg,delta;
float leftSpeed = 0;
float rightSpeed = 40;
float spiralFactor = 0.5;
const float target = 480;
const float steeringMod = 0.03;
const float botSpeed = 10;

task wander(){

  while (!foundLine){
  		sleep(300);
  		if (leftSpeed<40){
  			leftSpeed += spiralFactor;
  		}
     //if (time1(T1) >= 5000){
      // clearTimer(T1);
      // if (rightSpeed >= 40){
       //  long diff = rightSpeed - leftSpeed;
         
      //	 rightSpeed = rightSpeed-(diff*0.65);
     //	}
   	//	}
   		
      HTCS2readRawRGB(S3, true, r,g,b);
      avg = (r+g+b)/3;

      //setMotorSpeed(leftMotor, leftSpeed);
      //setMotorSpeed(rightMotor, rightSpeed);

      if (avg <=  target){
        foundLine = true;
        setMotorSpeed(leftMotor, 0);
        setMotorSpeed(rightMotor, 0);
      }

  }

}

task followLine() {
	while(true){
		while (foundLine){

			HTCS2readRawRGB(S3, true, r,g,b);
			avg = (r + g + b)/3;
			delta = target - avg;

			rightSpeed = botSpeed + (delta * steeringMod);
			leftSpeed = botSpeed - (delta * steeringMod);

			//setMotorSpeed(leftMotor, leftSpeed);
			//setMotorSpeed(rightMotor, rightSpeed);

		}
		sleep(250);
	}
}

task main(){
  startTask(wander);
  startTask(followLine);

  while (true){

    setMotorSpeed(leftMotor, leftSpeed);
    setMotorSpeed(rightMotor, rightSpeed);

  }

}
